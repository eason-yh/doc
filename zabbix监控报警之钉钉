zabbix监控一直我都是在用邮件，短信发送，最近做阿里云的服务器监控，用到了钉钉的机器人，其实钉钉的机器人已经出来很久了，只是一直想用，因为邮件我觉得也还
可以，不过如果你要求及时收到zabbix的报警，在网络方面没有问题的情况下，钉钉的机器人我觉得可以作为首选

邮件和短信的缺点：

邮件的客户端我真的不想吐槽什么，实在是太多了，但是很及时的通知你的，很少，我用的最多的还是网易的邮箱客户端，推送简直慢的无法想象
如果你的办公地点手机信号不好，或者使用的短信平台商做的不好，那么短信也不能起到很好的作用，短信是消费的产品，如果你财大气粗请忽视

钉钉的机器人，还有钉钉的客户端，推送消息几乎可以达到秒级（前提是网络良好），可以使你很及时的收到报警信息，及时处理突发事件

钉钉机器人，首先你需要有一个钉钉账号，具体注册机器人的方法这里不做讲解，请自行寻找资料

调用钉钉机器人的脚本如下：
注意：此脚本只是在原有作者的基础上进行提取，因为毕竟对于运维来说，只用其中一部分就可以，感谢Devin Zhang（这是在pycharm中搜索到的）
文章地址：https://blog.csdn.net/zhuifengshenku/article/details/79147479

#!/usr/bin/env python
#_*_ coding:utf-8 _*_

import sys
import json
import logging
import requests

def is_not_null_and_blank_str(content):
    """
    非空字符串
    :param content: 字符串
    :return: 非空 - True，空 - False
    """
    if content and content.strip():
        return True
    else:
        return False


class DingtalkChatbot(object):
    """
    钉钉群自定义机器人（每个机器人每分钟最多发送20条），支持文本（text）、连接（link）、markdown三种消息类型！
    """
    def __init__(self, webhook):
        """
        机器人初始化
        :param webhook:
        """
        super(DingtalkChatbot, self).__init__()
        self.headers = {'Content-Type': 'application/json; charset=utf-8'}
        self.webhook = webhook

    def send_text(self, msg, is_at_all=False, at_mobiles=[]):
        """
        text类型
        :param msg: 消息内容
        :param is_at_all: @所有人时：true，否则为false
        :param at_mobiles: 被@人的手机号（字符串）
        :return: 返回消息发送结果
        """
        data = {"msgtype": "text"}
        if is_not_null_and_blank_str(msg):
            data["text"] = {"content": msg}
        else:
            logging.error("text类型，消息内容不能为空！")
            raise ValueError("text类型，消息内容不能为空！")

        if at_mobiles:
            at_mobiles = list(map(str, at_mobiles))

        data["at"] = {"atMobiles": at_mobiles, "isAtAll": is_at_all}
        logging.info('text类型：%s' % data)
        return self.post(data)

    def post(self, data):
        """
        发送消息（内容UTF-8编码）
        :param data: 消息数据（字典）
        :return: 返回发送结果
        """
        post_data = json.dumps(data)
        try:
            response = requests.post(self.webhook, headers=self.headers, data=post_data)
        except requests.exceptions.HTTPError as exc:
            logging.error("消息发送失败， HTTP error: %d, reason: %s" % (exc.response.status_code, exc.response.reason))
            raise
        except requests.exceptions.ConnectionError:
            logging.error("消息发送失败，HTTP connection error!")
            raise
        else:
            result = response.json()
            logging.info('发送结果：%s' % result)
            if result['errcode']:
                error_data = {"msgtype": "text", "text": {"content": "钉钉机器人消息发送失败，原因：%s" % result['errmsg']}, "at": {"isAtAll": True}}
                logging.error("消息发送失败，重新发送：%s" % error_data)
                requests.post(self.webhook, headers=self.headers, data=json.dumps(error_data))
            return result

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    webhook = 'https://oapi.dingtalk.com/robot/send?access_token=*****'
    xiaoding = DingtalkChatbot(webhook)
    title=sys.argv[1]
    content=sys.argv[2]
    xiaoding.send_text(msg=title + content)
    
    
脚本也是经过测试，是没有问题的，线上也在使用，如果你对zabbix理解不深入或者调试中遇到错误，请多多研究，自行领悟
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
